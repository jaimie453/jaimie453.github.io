// -----------------------------------------------------------------------------
// This file contains all application-wide Sass functions.
// -----------------------------------------------------------------------------

@function generate-fibonacci-sequence($length) {
  $sequence: ();
  $i: 0;

  @while $i < $length {
    @if $i == 0 {
      $sequence: append($sequence, 0);
    } @else if $i == 1 or $i == 2 {
      $sequence: append($sequence, 1);
    } @else {
      // sass is 1-indexed
      $value: nth($sequence, $i) + nth($sequence, $i - 1);
      $sequence: append($sequence, $value);
    }

    $i: $i + 1;
  }

  @return $sequence;
}

/// Returns contrast ratio between provided colors
/// 
/// @param {RGB} $bg-color - Background color
/// @param {RGB} $fg-color - Foreground color
///
/// @return {Decimal} - contrast ratio (1-21), rounded to 2 decimals
@function get-color-contrast($bg-color, $fg-color) {
  @return 1;
}


/// Test `$function` with `$spec` test suite
///
/// @author Kitty Giraudel
///
/// @param {String} $function - Name of function to test
/// @param {Map} $spec - Test suite to run `$function` against
///
/// @return {Map}
///   * `function`: `$function`
///   * `length`: the length of `$tests`
///   * `pass`: number of passing tests out of `length`
///   * `fail`: number of failing tests out of `length`
///   * `tests`: list of maps containing:
///       * `input`: test input (key from `$tests`)
///       * `expected`: expected result from `input`
///       * `actual`: actual result from `input`
///       * `pass`: whether the test passed or not
///       * `fail`: whether the test failed or not
///
/// @example scss - Testing of a `double` function
///   @function double($value) { @return $value * 2 }
///
///   $test: test('double', (
///     1: 2,
///     2: 4,
///     3: 6,
///     4: 8,
///   ));
///
/// @example scss - Result of `double` tests
///   (
///     'function': 'double',
///     'length': 4,
///     'pass': 4,
///     'fail': 0,
///     'tests': ( ... ),
///   )
///
/// @example scss - `tests` value from result of `double` tests
///   (
///     (
///       'input': 1,
///       'expected': 2,
///       'actual': 2,
///       'pass': true,
///       'fail': false,
///     ),
///     // ...
///   )
@function test($function, $spec) {
  $passing-tests: 0;
  $tests: ();

  @each $arguments,
  $expected-result in $spec {
    $actual-result: call(get-function($function), $arguments...);
    $passed: $actual-result ==$expected-result;

    $tests: append($tests, ('input': $arguments,
        'expected': $expected-result,
        'actual': $actual-result,
        'pass': $passed,
        'fail': not $passed,
      ), 'comma');

    @if $passed {
      $passing-tests: $passing-tests + 1;
    }
  }

  @return ('function': $function,
    'length': length($tests),
    'tests': $tests,
    'pass': $passing-tests,
    'fail': length($tests) - $passing-tests,
  );
}