// -----------------------------------------------------------------------------
// This file contains all third-party functions/mixins.
// -----------------------------------------------------------------------------

@function slice($list, $start: 1, $end: length($list)) {
  $result: null;

  @if type-of($start) !=number or type-of($end) !=number {
    @warn "Either $start or $end are not a number for `slice`.";
  } @else if $start>$end {
    @warn "The start index has to be lesser than or equals to the end index for `slice`.";
  } @else if $start < 1 or $end < 1 {
    @warn "List indexes must be non-zero integers for `slice`.";
  } @else if $start>length($list) {
    @warn "List index is #{$start} but list is only #{length($list)} item long for `slice`.";
  } @else if $end>length($list) {
    @warn "List index is #{$end} but list is only #{length($list)} item long for `slice`.";
  } @else {
    $result: ();

    @for $i from $start through $end {
      $result: append($result, nth($list, $i));
    }
  }

  @return $result;
}

/// Test `$function` with `$spec` test suite
///
/// @author Kitty Giraudel
///
/// @param {String} $function - Name of function to test
/// @param {Map} $spec - Test suite to run `$function` against
///
/// @return {Map}
///   * `function`: `$function`
///   * `length`: the length of `$tests`
///   * `pass`: number of passing tests out of `length`
///   * `fail`: number of failing tests out of `length`
///   * `tests`: list of maps containing:
///       * `input`: test input (key from `$tests`)
///       * `expected`: expected result from `input`
///       * `actual`: actual result from `input`
///       * `pass`: whether the test passed or not
///       * `fail`: whether the test failed or not
///
/// @example scss - Testing of a `double` function
///   @function double($value) { @return $value * 2 }
///
///   $test: test('double', (
///     1: 2,
///     2: 4,
///     3: 6,
///     4: 8,
///   ));
///
/// @example scss - Result of `double` tests
///   (
///     'function': 'double',
///     'length': 4,
///     'pass': 4,
///     'fail': 0,
///     'tests': ( ... ),
///   )
///
/// @example scss - `tests` value from result of `double` tests
///   (
///     (
///       'input': 1,
///       'expected': 2,
///       'actual': 2,
///       'pass': true,
///       'fail': false,
///     ),
///     // ...
///   )

@function test($function, $spec) {
  $passing-tests: 0;
  $tests: ();

  @each $arguments, $expected-result in $spec {
    $actual-result: call(get-function($function), $arguments...);
    $passed: $actual-result==$expected-result;
    $tests: append(
      $tests,
      (
        "input": $arguments,
        "expected": $expected-result,
        "actual": $actual-result,
        "pass": $passed,
        "fail": not $passed,
      ),
      "comma"
    );

    @if $passed {
      $passing-tests: $passing-tests + 1;
    }
  }

  @return (
    "function": $function,
    "length": length($tests),
    "tests": $tests,
    "pass": $passing-tests,
    "fail": length($tests) - $passing-tests
  );
}

// _decimal.scss | MIT License | gist.github.com/terkel/4373420

// Round a number to specified digits.
//
// @param  {Number} $number A number to round
// @param  {Number} [$digits:0] Digits to output
// @param  {String} [$mode:round] (round|ceil|floor) How to round a number
// @return {Number} A rounded number
// @example
//     decimal-round(0.333)    => 0
//     decimal-round(0.333, 1) => 0.3
//     decimal-round(0.333, 2) => 0.33
//     decimal-round(0.666)    => 1
//     decimal-round(0.666, 1) => 0.7
//     decimal-round(0.666, 2) => 0.67
//
@function decimal-round($number, $digits: 0, $mode: round) {
  $n: 1;

  // $number must be a number
  @if type-of($number) !=number {
    @warn "#{ $number } is not a number.";
    @return $number;
  }

  // $digits must be a unitless number
  @if type-of($digits) !=number {
    @warn "#{ $digits } is not a number.";
    @return $number;
  } @else if not unitless($digits) {
    @warn "#{ $digits } has a unit.";
    @return $number;
  }

  @for $i from 1 through $digits {
    $n: $n * 10;
  }

  @if $mode==round {
    @return calc(round($number * $n) / $n);
  } @else if $mode==ceil {
    @return calc(ceil($number * $n) / $n);
  } @else if $mode==floor {
    @return calc(floor($number * $n) / $n);
  } @else {
    @warn "#{ $mode } is undefined keyword.";
    @return $number;
  }
}

// Ceil a number to specified digits.
//
// @param  {Number} $number A number to round
// @param  {Number} [$digits:0] Digits to output
// @return {Number} A ceiled number
// @example
//     decimal-ceil(0.333)    => 1
//     decimal-ceil(0.333, 1) => 0.4
//     decimal-ceil(0.333, 2) => 0.34
//     decimal-ceil(0.666)    => 1
//     decimal-ceil(0.666, 1) => 0.7
//     decimal-ceil(0.666, 2) => 0.67
//
@function decimal-ceil($number, $digits: 0) {
  @return decimal-round($number, $digits, ceil);
}

// Floor a number to specified digits.
//
// @param  {Number} $number A number to round
// @param  {Number} [$digits:0] Digits to output
// @return {Number} A floored number
// @example
//     decimal-floor(0.333)    => 0
//     decimal-floor(0.333, 1) => 0.3
//     decimal-floor(0.333, 2) => 0.33
//     decimal-floor(0.666)    => 0
//     decimal-floor(0.666, 1) => 0.6
//     decimal-floor(0.666, 2) => 0.66
//
@function decimal-floor($number, $digits: 0) {
  @return decimal-round($number, $digits, floor);
}

/// Mixin decorating the result of `test(..)` function to throw it as an error
///
/// @author Kitty Giraudel
///
/// @param {Map} $data - Return of `test(..)` function
///
/// @example scss - Printing the result of `double` function test
///   @include run(test('double', $tests-double));
///
/// @example scss - Result of `double` function test
///   Started tests for function `double`
///   ----------
///   Test 1 out of 4... ✔
///   Test 2 out of 4... ✔
///   Test 3 out of 4... ✔
///   Test 4 out of 4... ✔
///   ----------
///   Finished: 0 test(s) failing out of 4
@mixin run($data) {
  $output: "";
  $length: map-get($data, "length");
  $tests: map-get($data, "tests");

  @each $test in $tests {
    $output: $output +
      "Test #{index($tests, $test)} out of #{$length}... " +
      if(
        map-get($test, "pass"),
        "✔",
        '✘\A   Expected : `#{map-get($test, "expected")}`\A   Actual   : `#{map-get($test, "actual")}`'
      ) +
      "\A ";
  }

  $message: "Started tests for function `#{map-get($data, " function ")}()` \A "+
    "----------\A "+ $output + "\A "+ "----------\A "+
    'Finished: #{map-get($data, "pass")} test(s) passing out of #{$length}';

  @if map-get($data, "fail") > 0 {
    // @error doesn't respect \a formatting
    @warn $message;
    @error "Tests failed.";
  } @else {
    @warn $message;
  }
}
